# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
# 
# ROOST_METHOD_HASH=77709b3e66
# ROOST_METHOD_SIG_HASH=9efcbbb286
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Reset ONT device to resolve connectivity issues',
#     steps: 'Given a customer with subscriber ID "SVTAL002" reports intermittent internet connectivity\n' +
#       'When the support representative initiates a diagnostic test\n' +
#       'Then the service test API should return a test ID\n' +
#       'And the diagnostic result should indicate ONT connectivity issues\n' +
#       'When the support representative uses the configuration API to reset the GPON ONT\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should report stable internet connectivity',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "https://api.example.com"
  phases:
    - duration: 60
      arrivalRate: 5
  variables:
    subscriberId: "SVTAL002"

scenarios:
  - name: Reset ONT device to resolve connectivity issues
    flow:
      - log: "Initiating diagnostic test for subscriber {{ subscriberId }}"
      - post:
          url: "/v1/diagnostic-tests"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            subscriberId: "{{ subscriberId }}"
          capture:
            - json: "$.testId"
              as: "testId"
          expect:
            - statusCode: 201
            - hasProperty: "testId"
            - contentType: "application/json"

      - log: "Diagnostic test initiated with test ID {{ testId }}"
      - think: 5

      - get:
          url: "/v1/diagnostic-tests/{{ testId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
            - hasProperty: "status"
            - hasProperty: "result"
            - jmespath: "result"
              matches: "ONT connectivity issues"

      - log: "Diagnostic result indicates ONT connectivity issues"

      - post:
          url: "/v1/ont-reset"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            subscriberId: "{{ subscriberId }}"
          expect:
            - statusCode: 200
            - hasProperty: "status"
            - jmespath: "status"
              matches: "success"

      - log: "ONT reset successful for subscriber {{ subscriberId }}"

      - think: 10

      - get:
          url: "/v1/connectivity-status/{{ subscriberId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
            - hasProperty: "status"
            - jmespath: "status"
              matches: "stable"

      - log: "Connectivity status confirmed as stable for subscriber {{ subscriberId }}"
