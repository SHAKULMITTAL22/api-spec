# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type DBRX and AI Model dbrx-instruct-032724
# 
# ROOST_METHOD_HASH=ee0418c08a
# ROOST_METHOD_SIG_HASH=1c092be52c
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Diagnose and resolve WiFi interference issues',
#     steps: 'Given a customer with subscriber ID "SVTAL004" reports slow WiFi speeds\n' +
#       'When the support representative initiates a diagnostic test\n' +
#       'Then the service test API should return a test ID\n' +
#       'And the diagnostic result should indicate WiFi interference on the current channel\n' +
#       'When the support representative uses the configuration API to change the WiFi channel to an less congested one\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should report improved WiFi speeds',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 10
      arrivalRate: 10
  processor: "./artillery-processor.js"
  plugins:
    expect: {}
  payload:
    path: "DiagnoseAndResolveWiFiInterferenceIssues.csv"
    skipHeader: true
    delimiter: "^|^"

scenarios:
  - name: "Scenario: Diagnose and resolve WiFi interference issues - Initiate diagnostic test"
    flow:
      - function: "generateTestId"
        log: "Generating test ID for diagnostic test"
      - post:
          url: "/serviceTest"
          headers:
            Content-Type: "application/json"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          payload:
            subscriberId: "{{ subscriberId }}"
            testType: "diagnostic"
          expect:
            statusCode: 200
            body:
              testId: "{{ $processEnvironment.TEST_ID }}"
            schema:
              properties:
                testId:
                  type: "string"
                  pattern: "^[a-zA-Z0-9]+$"
              required:
                - "testId"
            log: "Initiated diagnostic test with test ID {{ $processEnvironment.TEST_ID }}"

  - name: "Scenario: Diagnose and resolve WiFi interference issues - Change WiFi channel"
    flow:
      - log: "Changing WiFi channel for subscriber ID {{ subscriberId }}"
      - post:
          url: "/configuration"
          headers:
            Content-Type: "application/json"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          payload:
            subscriberId: "{{ subscriberId }}"
            action: "changeChannel"
            newChannel: "6"
          expect:
            statusCode: 200
            body:
              status: "success"
            schema:
              properties:
                status:
                  type: "string"
                  pattern: "^(success|failure)$"
              required:
                - "status"
            log: "Changed WiFi channel for subscriber ID {{ subscriberId }} to channel 6"

  - name: "Scenario: Diagnose and resolve WiFi interference issues - Post diagnostic result event"
    flow:
      - log: "Posting diagnostic result event"
      - post:
          url: "/listener/configurationResultEvent"
          headers:
            Content-Type: "application/json"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          payload:
            testId: "{{ $processEnvironment.TEST_ID }}"
            result: "WiFi interference detected"
          expect:
            statusCode: 200
            body:
              status: "success"
            schema:
              properties:
                status:
                  type: "string"
                  pattern: "^(success|failure)$"
              required:
                - "status"
            log: "Posted diagnostic result event with test ID {{ $processEnvironment.TEST_ID }} and result WiFi interference detected"

  - name: "Scenario: Diagnose and resolve WiFi interference issues - Post service test result event"
    flow:
      - log: "Posting service test result event"
      - post:
          url: "/listener/serviceTestResultEvent"
          headers:
            Content-Type: "application/json"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          payload:
            testId: "{{ $processEnvironment.TEST_ID }}"
            result: "Improved WiFi speeds"
          expect:
            statusCode: 200
            body:
              status: "success"
            schema:
              properties:
                status:
                  type: "string"
                  pattern: "^(success|failure)$"
              required:
                - "status"
            log: "Posted service test result event with test ID {{ $processEnvironment.TEST_ID }} and result Improved WiFi speeds"
