# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
# 
# ROOST_METHOD_HASH=ee0418c08a
# ROOST_METHOD_SIG_HASH=1c092be52c
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Diagnose and resolve WiFi interference issues',
#     steps: 'Given a customer with subscriber ID "SVTAL004" reports slow WiFi speeds\n' +
#       'When the support representative initiates a diagnostic test\n' +
#       'Then the service test API should return a test ID\n' +
#       'And the diagnostic result should indicate WiFi interference on the current channel\n' +
#       'When the support representative uses the configuration API to change the WiFi channel to an less congested one\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should report improved WiFi speeds',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "https://api.example.com"
  phases:
    - duration: 60
      arrivalRate: 5
  variables:
    subscriberId: "SVTAL004"

scenarios:
  - name: Diagnose and resolve WiFi interference issues
    flow:
      - log: "Initiating diagnostic test for subscriber ID {{ subscriberId }}"
      - post:
          url: "/api/v1/diagnostic-tests"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            subscriberId: "{{ subscriberId }}"
          capture:
            - json: "$.testId"
              as: "testId"
          expect:
            - statusCode: 201
            - hasProperty: "testId"
            - contentType: "application/json"

      - log: "Retrieving diagnostic test results for test ID {{ testId }}"
      - get:
          url: "/api/v1/diagnostic-tests/{{ testId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
            - contentType: "application/json"
            - hasProperty: "result"
            - hasProperty: "interference"
            - jmespath: "result"
              equals: "WiFi interference detected"
            - jmespath: "interference.channel"
              matches: "^[0-9]+$"

      - log: "Changing WiFi channel to resolve interference"
      - put:
          url: "/api/v1/wifi-config/{{ subscriberId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            channel: "{{ $randomNumber(1,11) }}"
          expect:
            - statusCode: 200
            - contentType: "application/json"
            - hasProperty: "success"
            - jmespath: "success"
              equals: true

      - log: "Verifying improved WiFi speeds"
      - post:
          url: "/api/v1/speed-tests"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            subscriberId: "{{ subscriberId }}"
          capture:
            - json: "$.speedTestId"
              as: "speedTestId"
          expect:
            - statusCode: 201
            - hasProperty: "speedTestId"
            - contentType: "application/json"

      - think: 10

      - log: "Retrieving speed test results for test ID {{ speedTestId }}"
      - get:
          url: "/api/v1/speed-tests/{{ speedTestId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
            - contentType: "application/json"
            - hasProperty: "downloadSpeed"
            - hasProperty: "uploadSpeed"
            - jmespath: "downloadSpeed"
              matches: "^[0-9]+(\\.[0-9]+)?$"
            - jmespath: "uploadSpeed"
              matches: "^[0-9]+(\\.[0-9]+)?$"
