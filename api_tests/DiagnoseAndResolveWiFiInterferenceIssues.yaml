# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=ee0418c08a
# ROOST_METHOD_SIG_HASH=1c092be52c
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Diagnose and resolve WiFi interference issues',
#     steps: 'Given a customer with subscriber ID "SVTAL004" reports slow WiFi speeds\n' +
#       'When the support representative initiates a diagnostic test\n' +
#       'Then the service test API should return a test ID\n' +
#       'And the diagnostic result should indicate WiFi interference on the current channel\n' +
#       'When the support representative uses the configuration API to change the WiFi channel to an less congested one\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should report improved WiFi speeds',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  payload:
    path: "DiagnoseAndResolveWiFiInterferenceIssues.csv"
    fields:
      - "subscriberID"
      - "newChannel"
    skipHeader: true
    delimiter: "^|^"
  environments:
    staging:
      target: "https://staging.api.example.com"
    production:
      target: "https://api.example.com"
  plugins:
    expect: {}

scenarios:
  - name: "Diagnose and resolve WiFi interference issues"
    flow:
      - log: "Initiating diagnostic test for subscriber ID {{ subscriberID }}"
      - post:
          url: "/serviceTest"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            serviceTest:
              type: "diagnostic"
              customer:
                subscriberId: "{{ subscriberID }}"
          expect:
            - statusCode: 200
            - hasProperty: "control"
            - hasProperty: "control.type"
            - hasProperty: "control.message"
            - hasProperty: "control.code"
      - think: 1

      - log: "Changing WiFi channel to a less congested one using configuration API"
      - post:
          url: "/configuration"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            configuration:
              action:
                type: "HGW_WIFI_CONFIGURATION"
              id: "{{ subscriberID }}"
              adminStatus: "1"
              startDate: "2023-01-01T00:00:00Z"
              endDate: "2023-01-02T00:00:00Z"
              state: "active"
          expect:
            - statusCode: 200
            - hasProperty: "control"
            - hasProperty: "control.type"
            - hasProperty: "control.message"
            - hasProperty: "control.code"
      - think: 1

      - log: "Verifying the customer reports improved WiFi speeds after channel change"
      - post:
          url: "/listener/configurationResultEvent"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            notification:
              customer:
                subscriberId: "{{ subscriberID }}"
              serviceTest:
                id: "generatedTestID"  # Assuming testID is generated and known at this point
                type: "diagnostic"
                state: "FINISHED"
                diagnostic:
                  result: "success"
          expect:
            - statusCode: 204
      - think: 1

      - log: "Checking for the diagnostic result indicating WiFi interference"
      - post:
          url: "/listener/serviceTestResultEvent"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            notification:
              customer:
                subscriberId: "{{ subscriberID }}"
              serviceTest:
                id: "generatedTestID"
                type: "diagnostic"
                state: "FINISHED"
                diagnostic:
                  result: "interference"
          expect:
            - statusCode: 204
      - think: 1
