# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=ee0418c08a
# ROOST_METHOD_SIG_HASH=1c092be52c
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Diagnose and resolve WiFi interference issues',
#     steps: 'Given a customer with subscriber ID "SVTAL004" reports slow WiFi speeds\n' +
#       'When the support representative initiates a diagnostic test\n' +
#       'Then the service test API should return a test ID\n' +
#       'And the diagnostic result should indicate WiFi interference on the current channel\n' +
#       'When the support representative uses the configuration API to change the WiFi channel to an less congested one\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should report improved WiFi speeds',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  environments:
    production:
      target: "{{ $processEnvironment.API_HOST }}"
  plugins:
    expect: {}
  payload:
    path: "DiagnoseAndResolveWiFiInterferenceIssues.csv"
    fields: ["subscriberId", "channel"]
    skipHeader: true
    delimiter: "^|^"

scenarios:
  - name: "Diagnose and resolve WiFi interference issues"
    flow:
      - post:
          url: "/serviceTest"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            serviceTest:
              type: "diagnostic"
              customer:
                subscriberId: "{{ subscriberId }}"
          log: "Initiating diagnostic test for subscriber ID: {{ subscriberId }}"
          expect:
            - statusCode: 200
            - hasProperty: "testID"
            - hasProperty: "diagnosticResult"
            - jmespath: "diagnosticResult.type == 'WiFiInterference'"
      - log: "Diagnostic test should return a test ID and indicate WiFi interference"

      - think: 1

      - post:
          url: "/configuration"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            configuration:
              action:
                type: "HGW_WIFI_CONFIGURATION"
              id: "{{ subscriberId }}"
              adminStatus: "1"
              startDate: "2023-01-01T00:00:00Z"
              endDate: "2023-12-31T23:59:59Z"
              state: "active"
          log: "Changing WiFi channel to less congested one using configuration API"
          expect:
            - statusCode: 200
            - hasProperty: "success"
            - jmespath: "control.message == 'Configuration successful'"
      - log: "Configuration API should return a success response and customer should report improved WiFi speeds"
