# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=6105ffde10
# ROOST_METHOD_SIG_HASH=e3af0b476f
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Troubleshoot and resolve a failed configuration change',
#     steps: 'Given a customer with subscriber ID "SVTAL006" requests a WiFi configuration change\n' +
#       'When the support representative uses the configuration API to make the requested change\n' +
#       'And the configuration API returns an error response\n' +
#       'Then the support representative should initiate a diagnostic test\n' +
#       'And the service test API should return a test ID\n' +
#       'And the diagnostic result should provide details about the configuration failure\n' +
#       'When the support representative resolves the identified issue and retries the configuration change\n' +
#       'Then the configuration API should return a success response\n' +
#       "And the customer's WiFi should reflect the requested changes",
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: '{{ $processEnvironment.API_HOST }}'
  phases:
    - duration: 60
      arrivalRate: 1
  payload:
    path: TroubleshootAndResolveFailedConfigurationChange.csv
    fields:
      - subscriberId
      - type
      - frequencyBand
      - wifiIndex
      - passwd
      - mode
    skipHeader: true
    delimiter: ^|^
  environments:
    dev:
      API_HOST: https://api.dev.example.com
      AUTH_TOKEN: Bearer your-dev-token
  plugins:
    expect: {}
scenarios:
  - name: Troubleshoot and resolve a failed configuration change
    flow:
      - post:
          url: '{{ $processEnvironment.API_HOST_0 }}/configuration'
          headers:
            Authorization: '{{ $processEnvironment.AUTH_TOKEN }}'
          json:
            configuration:
              action:
                type: '{{ type }}'
                parameters:
                  frequencyBand: '{{ frequencyBand }}'
                  wifiIndex: '{{ wifiIndex }}'
                  passwd: '{{ passwd }}'
                  mode: '{{ mode }}'
              customer:
                subscriberId: '{{ subscriberId }}'
          log: >-
            Attempting to change WiFi configuration for subscriber ID {{
            subscriberId }}
          expect:
            - statusCode: 400
            - contentType: application/json
            - hasProperty: type
            - hasProperty: message
            - hasProperty: code
          think: 1
      - log: >-
          Configuration API returned an error response as expected, initiating
          diagnostic test.
      - post:
          url: '{{ $processEnvironment.API_HOST_1 }}/serviceTest'
          headers:
            Authorization: '{{ $processEnvironment.AUTH_TOKEN }}'
          json:
            serviceTest:
              type: diagnostic
              customer:
                subscriberId: '{{ subscriberId }}'
          log: Initiating diagnostic test for subscriber ID {{ subscriberId }}
          expect:
            - statusCode: 200
            - contentType: application/json
            - hasProperty: control
            - hasProperty: id
          think: 1
      - log: >-
          Diagnostic test initiated successfully, retrieving test ID and
          details.
      - post:
          url: '{{ $processEnvironment.API_HOST_0 }}/configuration'
          headers:
            Authorization: '{{ $processEnvironment.AUTH_TOKEN }}'
          json:
            configuration:
              action:
                type: '{{ type }}'
                parameters:
                  frequencyBand: '{{ frequencyBand }}'
                  wifiIndex: '{{ wifiIndex }}'
                  passwd: '{{ passwd }}'
                  mode: '{{ mode }}'
              customer:
                subscriberId: '{{ subscriberId }}'
          log: >-
            Retrying WiFi configuration change for subscriber ID {{ subscriberId
            }}
          expect:
            - statusCode: 200
            - contentType: application/json
            - hasProperty: control
            - hasProperty: configuration
          think: 1
      - log: >-
          Configuration change retried and succeeded, WiFi should now reflect
          the requested changes.
