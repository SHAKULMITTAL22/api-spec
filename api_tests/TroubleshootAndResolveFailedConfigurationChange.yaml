# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
# 
# ROOST_METHOD_HASH=6105ffde10
# ROOST_METHOD_SIG_HASH=e3af0b476f
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Troubleshoot and resolve a failed configuration change',
#     steps: 'Given a customer with subscriber ID "SVTAL006" requests a WiFi configuration change\n' +
#       'When the support representative uses the configuration API to make the requested change\n' +
#       'And the configuration API returns an error response\n' +
#       'Then the support representative should initiate a diagnostic test\n' +
#       'And the service test API should return a test ID\n' +
#       'And the diagnostic result should provide details about the configuration failure\n' +
#       'When the support representative resolves the identified issue and retries the configuration change\n' +
#       'Then the configuration API should return a success response\n' +
#       "And the customer's WiFi should reflect the requested changes",
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "https://api.example.com"
  phases:
    - duration: 60
      arrivalRate: 5
  variables:
    subscriberId: "SVTAL006"

scenarios:
  - name: "Troubleshoot and resolve a failed configuration change"
    flow:
      - log: "Step 1: Attempt to change WiFi configuration"
      - post:
          url: "/v1/configuration/wifi"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            subscriberId: "{{ subscriberId }}"
            ssid: "NewWiFiName"
            password: "NewSecurePassword123"
          expect:
            - statusCode: 400
            - hasProperty: "error"
            - hasProperty: "message"

      - log: "Step 2: Initiate diagnostic test"
      - post:
          url: "/v1/diagnostic/test"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            subscriberId: "{{ subscriberId }}"
            testType: "wifi_configuration"
          capture:
            - json: "$.testId"
              as: "testId"
          expect:
            - statusCode: 200
            - hasProperty: "testId"

      - log: "Step 3: Retrieve diagnostic test results"
      - get:
          url: "/v1/diagnostic/test/{{ testId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
            - hasProperty: "status"
            - hasProperty: "details"
            - jmespath: "status"
              equals: "completed"

      - log: "Step 4: Resolve identified issue and retry configuration change"
      - post:
          url: "/v1/configuration/wifi"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            subscriberId: "{{ subscriberId }}"
            ssid: "NewWiFiName"
            password: "NewSecurePassword123"
          expect:
            - statusCode: 200
            - hasProperty: "success"
            - jmespath: "success"
              equals: true

      - log: "Step 5: Verify updated WiFi configuration"
      - get:
          url: "/v1/configuration/wifi/{{ subscriberId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
            - hasProperty: "ssid"
            - hasProperty: "password"
            - jmespath: "ssid"
              equals: "NewWiFiName"
