# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=6105ffde10
# ROOST_METHOD_SIG_HASH=e3af0b476f
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Troubleshoot and resolve a failed configuration change',
#     steps: 'Given a customer with subscriber ID "SVTAL006" requests a WiFi configuration change\n' +
#       'When the support representative uses the configuration API to make the requested change\n' +
#       'And the configuration API returns an error response\n' +
#       'Then the support representative should initiate a diagnostic test\n' +
#       'And the service test API should return a test ID\n' +
#       'And the diagnostic result should provide details about the configuration failure\n' +
#       'When the support representative resolves the identified issue and retries the configuration change\n' +
#       'Then the configuration API should return a success response\n' +
#       "And the customer's WiFi should reflect the requested changes",
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  payload:
    path: "TroubleshootAndResolveFailedConfigurationChange.csv"
    fields:
      - "subscriberID"
      - "configurationPayload"
    skipHeader: true
    delimiter: "^|^"
  environments:
    development:
      API_HOST: "http://dev.example.com"
    production:
      API_HOST: "http://prod.example.com"
  plugins:
    expect: {}

scenarios:
  - name: "Troubleshoot and resolve a failed configuration change"
    flow:
      - post:
          url: "/configuration"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            subscriberID: "{{ subscriberID }}"
            configurationDetails: "{{ configurationPayload }}"
          log: "Attempting to change configuration for subscriber SVTAL006"
          expect:
            - statusCode: 400
            - hasProperty: "type"
            - hasProperty: "message"
            - hasProperty: "code"
      - think: 1
      - post:
          url: "/serviceTest"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            subscriberID: "{{ subscriberID }}"
          log: "Initiating diagnostic test after failed configuration attempt"
          expect:
            - statusCode: 200
            - hasProperty: "control"
            - hasProperty: "control.type"
            - hasProperty: "control.message"
            - hasProperty: "control.code"
      - think: 1
      - post:
          url: "/configuration"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            subscriberID: "{{ subscriberID }}"
            configurationDetails: "{{ configurationPayload }}"
          log: "Retrying configuration change for subscriber SVTAL006 after resolving the issue"
          expect:
            - statusCode: 200
            - hasProperty: "control"
            - hasProperty: "control.type"
            - hasProperty: "control.message"
            - hasProperty: "control.code"
      - think: 1
