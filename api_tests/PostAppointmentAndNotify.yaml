# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=969e323815
# ROOST_METHOD_SIG_HASH=e7177c53aa
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: Schedule an appointment and notify via communication API',
#   background: 'Background:\n' +
#     "        * def appointmentApiURL = 'http://127.0.0.1:4010'\n" +
#     "        * def appointmentPayload = read('appointmentRequest.json')\n" +
#     "        * def communicationPayload = read('communicationRequest.json')\n" +
#     "        * def communicationApiURL = 'http://127.0.0.1:4001'",
#   rule: null,
#   scenario: {
#     title: 'Scenario: Post an appointment and notify about it',
#     steps: "Given path '/searchTimeSlot'\n" +
#       'And param addressId = 17713\n' +
#       "And param subscriberId = 'VTAL001'\n" +
#       "And param associatedDocument = 'VTT001'\n" +
#       "And param startDate = '2023-02-08T18:04:28Z'\n" +
#       "And param finishDate = '2023-02-08T18:04:28Z'\n" +
#       "And param orderType = 'Instalacao'\n" +
#       "And param productType = ['Banda Larga']\n" +
#       'When method get\n' +
#       'Then status 200\n' +
#       'And def slotId = response.slots[0].id\n' +
#       '\n' +
#       "        # Assume validation of the slotId and it's successful\n" +
#       '\n' +
#       '        # Step 2: Use the slot ID to create an appointment\n' +
#       "Given path '/appointment'\n" +
#       'And request appointmentPayload\n' +
#       'And set appointmentPayload.appointment.slot.id = slotId\n' +
#       'When method post\n' +
#       'Then status 201\n' +
#       'And def appointmentId = response.appointment.id\n' +
#       '\n' +
#       "        # Assume validation of the appointmentId and it's successful\n" +
#       '\n' +
#       '        # Step 3: Post a communication message using the Communication Management API\n' +
#       '        * url communicationApiURL\n' +
#       "Given path '/listener/communicationMessage'\n" +
#       'And request communicationPayload\n' +
#       'And set communicationPayload.value.id = appointmentId\n' +
#       '        # Set other necessary fields in communicationPayload as required\n' +
#       'When method post\n' +
#       'Then status 204',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  payload:
    path: "PostAppointmentAndNotify.csv"
    fields:
      - "addressId"
      - "subscriberId"
      - "associatedDocument"
      - "startDate"
      - "finishDate"
      - "orderType"
      - "productType"
      - "appointmentPayload"
      - "communicationPayload"
    skipHeader: true
    delimiter: "^|^"
  environments:
    production:
      target: "{{ $processEnvironment.API_HOST }}"
  plugins:
    expect: {}

scenarios:
  - name: "Post an appointment and notify about it"
    flow:
      - log: "Search available time slots with valid parameters"
      - get:
          url: "/searchTimeSlot?addressId={{ addressId }}&subscriberId={{ subscriberId }}&associatedDocument={{ associatedDocument }}&startDate={{ startDate }}&finishDate={{ finishDate }}&orderType={{ orderType }}&productType={{ productType }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
      - think: 1

      - log: "Post an appointment using the retrieved slot ID"
      - post:
          url: "/appointment"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            appointment:
              slot:
                id: "{{ response.body.slots[0].id }}"
          expect:
            - statusCode: 201
            - hasProperty: "appointment"
            - hasProperty: "appointment.id"

      - think: 1

      - log: "Notify about the appointment using the Communication Message API"
      - post:
          url: "/listener/communicationMessage"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            value:
              id: "{{ response.body.appointment.id }}"
            messageType: "Comunicado"
            company: "TestCompany"
            openingDate: "2023-02-09T00:00:00Z"
            closingDate: "2023-02-10T00:00:00Z"
            emissionDate: "2023-02-08T18:30:00Z"
            status: "Abertura"
            ticketNumber: "TK123456"
            type: "Incidente"
            eventType: "Interrupção não programada"
            loss: "None"
            networkType: "Fiber"
            windowType: "Emergency"
            promiseStartDate: "2023-02-09T00:00:00Z"
            promiseEndDate: "2023-02-10T00:00:00Z"
            startDate: "2023-02-09T00:00:00Z"
            endDate: "2023-02-10T00:00:00Z"
            promiseDate: "2023-02-09T00:00:00Z"
            editionDate: "2023-02-09T00:00:00Z"
            editionReason: "Initial"
            cancelDate: "2023-02-10T00:00:00Z"
            cancelReason: "Resolved"
            closureDate: "2023-02-10T00:00:00Z"
            closureMotive: "Completed"
            downtime: "2 hours"
            estimatedDowntime: "2 hours"
            reason: "Maintenance"
            detailedReason: "Scheduled Maintenance"
            generalStatus: "Active"
            affectedStretch: "Local Network"
            identifiedFailure: "None"
            closureCause: "None"
            closureReason: "None"
            closureProvidence: "None"
            affectedService:
              type: "Banda Larga"
              address:
                - "Street 123, City"
          expect:
            - statusCode: 204
      - think: 1
