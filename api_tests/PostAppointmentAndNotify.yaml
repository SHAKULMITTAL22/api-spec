# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=969e323815
# ROOST_METHOD_SIG_HASH=e7177c53aa
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: Schedule an appointment and notify via communication API',
#   background: 'Background:\n' +
#     "        * def appointmentApiURL = 'http://127.0.0.1:4010'\n" +
#     "        * def appointmentPayload = read('appointmentRequest.json')\n" +
#     "        * def communicationPayload = read('communicationRequest.json')\n" +
#     "        * def communicationApiURL = 'http://127.0.0.1:4001'",
#   rule: null,
#   scenario: {
#     title: 'Scenario: Post an appointment and notify about it',
#     steps: "Given path '/searchTimeSlot'\n" +
#       'And param addressId = 17713\n' +
#       "And param subscriberId = 'VTAL001'\n" +
#       "And param associatedDocument = 'VTT001'\n" +
#       "And param startDate = '2023-02-08T18:04:28Z'\n" +
#       "And param finishDate = '2023-02-08T18:04:28Z'\n" +
#       "And param orderType = 'Instalacao'\n" +
#       "And param productType = ['Banda Larga']\n" +
#       'When method get\n' +
#       'Then status 200\n' +
#       'And def slotId = response.slots[0].id\n' +
#       '\n' +
#       "        # Assume validation of the slotId and it's successful\n" +
#       '\n' +
#       '        # Step 2: Use the slot ID to create an appointment\n' +
#       "Given path '/appointment'\n" +
#       'And request appointmentPayload\n' +
#       'And set appointmentPayload.appointment.slot.id = slotId\n' +
#       'When method post\n' +
#       'Then status 201\n' +
#       'And def appointmentId = response.appointment.id\n' +
#       '\n' +
#       "        # Assume validation of the appointmentId and it's successful\n" +
#       '\n' +
#       '        # Step 3: Post a communication message using the Communication Management API\n' +
#       '        * url communicationApiURL\n' +
#       "Given path '/listener/communicationMessage'\n" +
#       'And request communicationPayload\n' +
#       'And set communicationPayload.value.id = appointmentId\n' +
#       '        # Set other necessary fields in communicationPayload as required\n' +
#       'When method post\n' +
#       'Then status 204',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  payload:
    path: "PostAppointmentAndNotify.csv"
    fields:
      - "addressId"
      - "subscriberId"
      - "associatedDocument"
      - "startDate"
      - "finishDate"
      - "orderType"
      - "productType"
      - "appointmentPayload"
      - "communicationPayload"
    skipHeader: true
    delimiter: "^|^"
  environments:
    production:
      target: "{{ $processEnvironment.API_HOST }}"
  plugins:
    expect: {}

scenarios:
  - name: "Post an appointment and notify about it"
    flow:
      - log: "Attempting to retrieve a time slot"
      - get:
          url: "/searchTimeSlot?addressId={{ addressId }}&subscriberId={{ subscriberId }}&associatedDocument={{ associatedDocument }}&startDate={{ startDate }}&finishDate={{ finishDate }}&orderType={{ orderType }}&productType={{ productType }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
          capture:
            json: "$.slots[0].id"
            as: "slotId"
      - think: 1

      - log: "Using the retrieved slot ID to create an appointment"
      - post:
          url: "/appointment"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            appointment:
              slot:
                id: "{{ slotId }}"
          expect:
            - statusCode: 201
            - hasProperty: "appointment.id"
          capture:
            json: "$.appointment.id"
            as: "appointmentId"
      - think: 1

      - log: "Posting a communication message using the Communication Management API"
      - post:
          url: "/listener/communicationMessage"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            value:
              id: "{{ appointmentId }}"
              messageType: "Comunicado"
              company: "CompanyX"
              openingDate: "{{ startDate }}"
              closingDate: "{{ finishDate }}"
              emissionDate: "{{ startDate }}"
              status: "Abertura"
              ticketNumber: "TK123"
              type: "Incidente"
              eventType: "Interrupção não programada"
              loss: "Low"
              networkType: "4G"
              windowType: "Maintenance"
              promiseStartDate: "{{ startDate }}"
              promiseEndDate: "{{ finishDate }}"
              startDate: "{{ startDate }}"
              endDate: "{{ finishDate }}"
              promiseDate: "{{ startDate }}"
              editionDate: "{{ startDate }}"
              editionReason: "Initial"
              cancelDate: "{{ finishDate }}"
              cancelReason: "User request"
              closureDate: "{{ finishDate }}"
              closureMotive: "Completed"
              downtime: "1 hour"
              estimatedDowntime: "2 hours"
              reason: "Maintenance"
              detailedReason: "Scheduled maintenance"
              generalStatus: "Closed"
              affectedStretch: "Local area"
              identifiedFailure: "None"
              closureCause: "None"
              closureReason: "Scheduled"
              closureProvidence: "Completed"
              affectedService:
                type: "Banda Larga"
                address:
                  - street: "Main St"
                    number: "42"
                    city: "Metro City"
          expect:
            - statusCode: 204
      - think: 1
