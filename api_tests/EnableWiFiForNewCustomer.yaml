# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
# 
# ROOST_METHOD_HASH=4992e43bd0
# ROOST_METHOD_SIG_HASH=cb107cc3ec
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Enable WiFi for a new customer',
#     steps: 'Given a new customer with subscriber ID "SVTAL005" has just had their fiber service installed\n' +
#       'When the support representative uses the configuration API to enable WiFi\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should be able to see and connect to their new WiFi network',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "https://api.example.com"
  phases:
    - duration: 60
      arrivalRate: 5
  variables:
    subscriberId: "SVTAL005"

scenarios:
  - name: Enable WiFi for a new fiber customer
    flow:
      - log: "Starting WiFi enablement process for new customer with subscriber ID {{ subscriberId }}"
      
      - get:
          url: "/v1/subscribers/{{ subscriberId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
            - contentType: "application/json"
            - hasProperty: "subscriberId"
            - hasProperty: "status"
            - equals: 
                - "$.status"
                - "ACTIVE"

      - log: "Verified subscriber status is ACTIVE"

      - post:
          url: "/v1/wifi/enable"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            subscriberId: "{{ subscriberId }}"
          expect:
            - statusCode: 200
            - contentType: "application/json"
            - hasProperty: "status"
            - hasProperty: "message"
            - equals:
                - "$.status"
                - "SUCCESS"
            - matchesRegexp:
                - "$.message"
                - "WiFi enabled successfully for subscriber SVTAL005"

      - log: "WiFi enablement API call successful"

      - get:
          url: "/v1/wifi/status/{{ subscriberId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
            - contentType: "application/json"
            - hasProperty: "wifiStatus"
            - hasProperty: "ssid"
            - hasProperty: "password"
            - equals:
                - "$.wifiStatus"
                - "ENABLED"

      - log: "Verified WiFi status is ENABLED and network details are available"

      - think: 5

      - get:
          url: "/v1/wifi/connection-test/{{ subscriberId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
            - contentType: "application/json"
            - hasProperty: "connectionStatus"
            - hasProperty: "signalStrength"
            - equals:
                - "$.connectionStatus"
                - "CONNECTED"
            - jmespath: "signalStrength >= 70"

      - log: "Verified customer can connect to the new WiFi network with good signal strength"
