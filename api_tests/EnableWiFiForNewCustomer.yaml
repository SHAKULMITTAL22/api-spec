# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=4992e43bd0
# ROOST_METHOD_SIG_HASH=cb107cc3ec
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Enable WiFi for a new customer',
#     steps: 'Given a new customer with subscriber ID "SVTAL005" has just had their fiber service installed\n' +
#       'When the support representative uses the configuration API to enable WiFi\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should be able to see and connect to their new WiFi network',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  processor: "./processors.js"
  environments:
    production:
      target: "{{ $processEnvironment.API_HOST }}"
  plugins:
    expect: {}
  payload:
    path: "EnableWiFiForNewCustomer.csv"
    fields:
      - "subscriberID"
      - "configuration.action.type"
      - "configuration.id"
      - "configuration.adminStatus"
    delimiter: "^|^"
    skipHeader: true

scenarios:
  - name: "Enable WiFi for a new customer"
    flow:
      - log: "Attempting to enable WiFi for a new customer with subscriber ID SVTAL005"
      - post:
          url: "/configuration"
          json:
            configuration:
              action:
                type: "{{ configuration.action.type }}"
              id: "{{ configuration.id }}"
              adminStatus: "{{ configuration.adminStatus }}"
              startDate: "{{ now }}"
              endDate: "{{ now }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          capture:
            json: "$.response"
            as: "activationResponse"
      - think: 1
      - log: "Expecting successful activation response"
      - expect:
          - statusCode: 200
          - hasProperty: "success"
          - equals: { path: "$.response.success", value: true }
      - log: "Customer should now be able to connect to their new WiFi network"
