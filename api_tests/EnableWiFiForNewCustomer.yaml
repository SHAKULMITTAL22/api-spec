# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=4992e43bd0
# ROOST_METHOD_SIG_HASH=cb107cc3ec
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Enable WiFi for a new customer',
#     steps: 'Given a new customer with subscriber ID "SVTAL005" has just had their fiber service installed\n' +
#       'When the support representative uses the configuration API to enable WiFi\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should be able to see and connect to their new WiFi network',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processLoopback.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  processor: "./processors.js"
  environments:
    production:
      target: "{{ $processEnvironment.API_HOST }}"
  plugins:
    expect: {}
  payload:
    path: "EnableWiFiForNewCustomer.csv"
    fields:
      - "subscriberID"
      - "wifiEnabled"
    skipHeader: true
    delimiter: "^|^"
  headers:
    Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"

scenarios:
  - name: "Enable WiFi for a new customer"
    flow:
      - log: "Attempting to enable WiFi for a new customer with subscriber ID SVTAL005"
      - post:
          url: "/configuration"
          json:
            subscriberID: "{{ subscriberID }}"
            wifiEnabled: true
            configuration:
              action:
                type: "HGW_WIFI_ENABLE"
              id: "{{ subscriberID }}"
              adminStatus: "1"
              startDate: "2023-01-01T00:00:00Z"
              endDate: "2023-12-31T23:59:59Z"
              state: "active"
          headers:
            Content-Type: "application/json"
          expect:
            - statusCode: 200
            - hasProperty: "success"
            - hasProperty: "message"
            - equals: 
                jsonPath: "$.message"
                value: "Configuration successful"
      - think: 1
      - log: "Expecting successful WiFi activation and connection availability for the customer"
      - post:
          url: "/serviceTest"
          json:
            subscriberID: "{{ subscriberID }}"
            testType: "WiFiConnection"
            serviceTest:
              type: "diagnostic"
              customer:
                subscriberId: "{{ subscriberID }}"
          headers:
            Content-Type: "application/json"
          expect:
            - statusCode: 200
            - hasProperty: "success"
            - hasProperty: "message"
            - equals: 
                jsonPath: "$.message"
                value: "Service test passed"
      - think: 1
      - log: "Checking invalid subscriber ID scenario where WiFi should not be enabled"
      - post:
          url: "/configuration"
          json:
            subscriberID: "INVALID_ID"
            wifiEnabled: true
            configuration:
              action:
                type: "HGW_WIFI_ENABLE"
              id: "INVALID_ID"
              adminStatus: "1"
              startDate: "2023-01-01T00:00:00Z"
              endDate: "2023-12-31T23:59:59Z"
              state: "inactive"
          headers:
            Content-Type: "application/json"
          expect:
            - statusCode: 400
            - hasProperty: "error"
            - equals: 
                jsonPath: "$.error"
                value: "Invalid subscriber ID"
      - think: 1
