# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
# 
# ROOST_METHOD_HASH=4992e43bd0
# ROOST_METHOD_SIG_HASH=cb107cc3ec
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Enable WiFi for a new customer',
#     steps: 'Given a new customer with subscriber ID "SVTAL005" has just had their fiber service installed\n' +
#       'When the support representative uses the configuration API to enable WiFi\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should be able to see and connect to their new WiFi network',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 1
      arrivalRate: 1
  payload:
    path: "{{ROOST_CSV_FILE_NAME}}"
    fields:
      - "subscriberId"
    skipHeader: true
    delimiter: "^|^"

scenarios:
  - name: Enable WiFi for a new customer
    flow:
      - post:
          url: "/configuration"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            configuration:
              action:
                type: "HGW_WIFI_ENABLE"
                parameters:
                  frequencyBand: "2.4GHz"
              customer:
                subscriberId: "{{ subscriberId }}"
          capture:
            - json: "$.control.type"
              as: "responseType"
            - json: "$.control.code"
              as: "responseCode"
            - json: "$.control.message"
              as: "responseMessage"
            - json: "$.configuration.id"
              as: "configurationId"
          expect:
            - statusCode: 200
            - hasProperty: "control"
            - hasProperty: "configuration"
            - equals:
                - "{{ responseType }}"
                - "S"
            - equals:
                - "{{ responseCode }}"
                - "200"
            - equals:
                - "{{ responseMessage }}"
                - "OK"

      - think: 5

      - post:
          url: "/listener/configurationResultEvent"
          headers:
            Content-Type: "application/json"
          json:
            notification:
              customer:
                subscriberId: "{{ subscriberId }}"
              serviceTest:
                id: "{{ configurationId }}"
                type: "diagnostic"
                startDate: "{{ $formatDate($now, 'YYYY-MM-DDTHH:mm:ssZ') }}"
                endDate: "{{ $formatDate($now, 'YYYY-MM-DDTHH:mm:ssZ') }}"
                state: "FINISHED"
                diagnostic:
                  code: "OK"
                  messages: []
          expect:
            - statusCode: 204
