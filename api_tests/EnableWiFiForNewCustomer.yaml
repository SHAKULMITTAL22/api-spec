# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=4992e43bd0
# ROOST_METHOD_SIG_HASH=cb107cc3ec
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Enable WiFi for a new customer',
#     steps: 'Given a new customer with subscriber ID "SVTAL005" has just had their fiber service installed\n' +
#       'When the support representative uses the configuration API to enable WiFi\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should be able to see and connect to their new WiFi network',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  payload:
    path: "EnableWiFiForNewCustomer.csv"
    fields:
      - subscriberId
      - service
      - action
    skipHeader: true
    delimiter: "^|^"
  plugins:
    expect: {}

scenarios:
  - name: "Enable WiFi for a new customer"
    flow:
      - log: "Attempting to enable WiFi for a new customer with subscriber ID {{ subscriberId }}"
      - post:
          url: "/configuration"
          headers:
            Authorization: "{{ $processEnv.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            subscriberId: "{{ subscriberId }}"
            service: "{{ service }}"
            action: "{{ action }}"
          expect:
            - statusCode: 200
            - hasProperty: "status"
            - hasProperty: "message"
            - equals:
                property: "status"
                value: "success"
            - matchesRegexp:
                json: "$.message"
                pattern: "WiFi enabled successfully"
      - think: 1
      - log: "Verifying the customer can see and connect to their new WiFi network"
      - post:
          url: "/serviceTest"
          headers:
            Authorization: "{{ $processEnv.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            subscriberId: "{{ subscriberId }}"
            service: "WiFi"
          expect:
            - statusCode: 200
            - hasProperty: "status"
            - hasProperty: "networkVisible"
            - equals:
                property: "status"
                value: "success"
            - equals:
                property: "networkVisible"
                value: true
      - think: 1
