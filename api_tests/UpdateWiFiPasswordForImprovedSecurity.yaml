# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=5a02b01fca
# ROOST_METHOD_SIG_HASH=9c8324b0ac
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Update WiFi password for improved security',
#     steps: 'Given a customer with subscriber ID "SVTAL003" requests a WiFi password change\n' +
#       'When the support representative uses the configuration API to set a new WiFi password\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should be able to connect to the WiFi network with the new password',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  payload:
    path: "UpdateWiFiPasswordForImprovedSecurity.csv"
    fields:
      - "configuration.id"
      - "configuration.action.type"
      - "configuration.adminStatus"
      - "configuration.startDate"
      - "configuration.endDate"
    delimiter: "^|^"
  environments:
    development:
      target: "http://dev.api.example.com"
    production:
      target: "http://api.example.com"
  plugins:
    expect: {}

scenarios:
  - name: "Update WiFi password for improved security"
    flow:
      - post:
          url: "/configuration"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            configuration:
              action:
                type: "HGW_WIFI_SET_PASSWD"
              id: "{{ configuration.id }}"
              adminStatus: "1"
              startDate: "{{ configuration.startDate }}"
              endDate: "{{ configuration.endDate }}"
          log: "Sending request to set a new WiFi password for subscriber ID SVTAL003"
          expect:
            - statusCode: 200
            - hasProperty: "control"
            - hasProperty: "control.type"
            - hasProperty: "control.message"
            - hasProperty: "control.code"
            - equals:
                control.type: "S"
                control.message: "Success"
                control.code: "200_OK"
      - think: 1
      - log: "Configuration API should return a success response indicating the WiFi password was successfully changed."
      - post:
          url: "/serviceTest"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            serviceTest:
              type: "diagnostic"
              customer:
                subscriberId: "SVTAL003"
          log: "Verifying that the customer can connect to the WiFi network with the new password."
          expect:
            - statusCode: 200
            - hasProperty: "control"
            - hasProperty: "control.type"
            - hasProperty: "control.message"
            - hasProperty: "control.code"
            - equals:
                control.type: "S"
                control.message: "Success"
                control.code: "200_OK"
      - think: 1
      - log: "Customer should be able to connect to the WiFi network with the new password."
