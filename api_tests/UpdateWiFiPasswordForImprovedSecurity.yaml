# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
# 
# ROOST_METHOD_HASH=5a02b01fca
# ROOST_METHOD_SIG_HASH=9c8324b0ac
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Update WiFi password for improved security',
#     steps: 'Given a customer with subscriber ID "SVTAL003" requests a WiFi password change\n' +
#       'When the support representative uses the configuration API to set a new WiFi password\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should be able to connect to the WiFi network with the new password',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "https://api.example.com"
  phases:
    - duration: 60
      arrivalRate: 5
  variables:
    subscriberId: "SVTAL003"
    newWifiPassword: "SecurePass123!"

scenarios:
  - name: Update WiFi password for improved security
    flow:
      - log: "Starting WiFi password update scenario for subscriber {{ subscriberId }}"
      
      - post:
          url: "/v1/configuration/wifi-password"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            subscriberId: "{{ subscriberId }}"
            newPassword: "{{ newWifiPassword }}"
          expect:
            - statusCode: 200
            - contentType: "application/json"
            - hasProperty: "success"
            - equals:
                - "$.success"
                - true
            - hasProperty: "message"
            - jmespath: "message"
              equals: "WiFi password updated successfully"

      - log: "WiFi password update request sent for subscriber {{ subscriberId }}"
      
      - think: 2

      - get:
          url: "/v1/configuration/wifi-status/{{ subscriberId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
            - contentType: "application/json"
            - hasProperty: "wifiStatus"
            - hasProperty: "lastPasswordChangeTimestamp"
            - jmespath: "wifiStatus"
              equals: "active"

      - log: "Verified WiFi status after password update for subscriber {{ subscriberId }}"
      
      - post:
          url: "/v1/test/wifi-connection"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            subscriberId: "{{ subscriberId }}"
            password: "{{ newWifiPassword }}"
          expect:
            - statusCode: 200
            - contentType: "application/json"
            - hasProperty: "connectionStatus"
            - jmespath: "connectionStatus"
              equals: "connected"
            - hasProperty: "signalStrength"

      - log: "Verified successful WiFi connection with new password for subscriber {{ subscriberId }}"
