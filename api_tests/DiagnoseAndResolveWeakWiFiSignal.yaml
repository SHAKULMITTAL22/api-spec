# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=75c9169c0c
# ROOST_METHOD_SIG_HASH=7a25c565c6
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Diagnose and resolve weak WiFi signal',
#     steps: 'Given a customer with subscriber ID "SVTAL001" reports a weak WiFi signal\n' +
#       'When the support representative initiates a diagnostic test\n' +
#       'Then the service test API should return a test ID\n' +
#       'And the diagnostic result should indicate low WiFi signal strength\n' +
#       'When the support representative uses the configuration API to change the WiFi channel\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should report improved WiFi signal strength',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  payload:
    path: "DiagnoseAndResolveWeakWiFiSignal.csv"
    fields:
      - "subscriberId"
      - "configurationId"
    skipHeader: true
    delimiter: "^|^"
  environments:
    development:
      API_HOST: "http://dev.example.com"
    production:
      API_HOST: "https://prod.example.com"
  plugins:
    expect: {}

scenarios:
  - name: "Diagnose and resolve weak WiFi signal"
    flow:
      - post:
          url: "/serviceTest"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            serviceTest:
              type: "diagnostic"
              customer:
                subscriberId: "{{ subscriberId }}"
          log: "Initiating a diagnostic test for weak WiFi signal."
          expect:
            - statusCode: 200
            - hasProperty: "control"
            - hasProperty: "control.code"
            - equals:
                jsonPath: "$.control.code"
                value: "S"
      - think: 1
      - post:
          url: "/configuration"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            configuration:
              action:
                type: "HGW_WIFI_CONFIGURATION"
              id: "{{ configurationId }}"
              adminStatus: "1"
              startDate: "2023-01-01T00:00:00Z"
              endDate: "2023-01-02T00:00:00Z"
              state: "active"
          log: "Changing the WiFi channel using the configuration API."
          expect:
            - statusCode: 200
            - hasProperty: "control"
            - hasProperty: "control.message"
            - equals:
                jsonPath: "$.control.message"
                value: "Configuration successful"
      - think: 1
