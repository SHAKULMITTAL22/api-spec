# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type DBRX and AI Model dbrx-instruct-032724
# 
# ROOST_METHOD_HASH=77709b3e66
# ROOST_METHOD_SIG_HASH=9efcbbb286
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Reset ONT device to resolve connectivity issues',
#     steps: 'Given a customer with subscriber ID "SVTAL002" reports intermittent internet connectivity\n' +
#       'When the support representative initiates a diagnostic test\n' +
#       'Then the service test API should return a test ID\n' +
#       'And the diagnostic result should indicate ONT connectivity issues\n' +
#       'When the support representative uses the configuration API to reset the GPON ONT\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should report stable internet connectivity',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 1
      arrivalRate: 1
  modes:
    - "use-strict"
  processor: "./processors/custom-processor.js"
  plugins:
    expect: {}
  payload:
    path: "ResetONTDeviceToResolveConnectivityIssues.csv"
    skipHeader: true
    delimiter: "^|^"

scenarios:
  - name: "Access to the service activation and configuration API"
    flow:
      - log: "Support representative has access to the service activation and configuration API"
      - post:
          url: "/configuration"
          headers:
            Content-Type: "application/json"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          payload:
            subscriberId: "{{ subscriberId }}"
        expect:
          - statusCode: 200
            hasProperty: ["success"]
            equals:
              body:
                success: true

  - name: "Initiate a diagnostic test"
    flow:
      - log: "Support representative initiates a diagnostic test"
      - post:
          url: "/serviceTest"
          headers:
            Content-Type: "application/json"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          payload:
            subscriberId: "{{ subscriberId }}"
        expect:
          - statusCode: 200
            hasProperty: ["testId"]
            matches:
              body:
                testId: "[a-zA-Z0-9]+"

  - name: "Reset the GPON ONT"
    flow:
      - log: "Support representative uses the configuration API to reset the GPON ONT"
      - post:
          url: "/configurationResultEvent"
          headers:
            Content-Type: "application/json"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          payload:
            testId: "{{ testId }}"
            result: "ONT connectivity issues"
        expect:
          - statusCode: 200
            hasProperty: ["success"]
            equals:
              body:
                success: true

  - name: "Stable internet connectivity"
    flow:
      - log: "Support representative receives a success response from the configuration API"
      - post:
          url: "/listener/serviceTestResultEvent"
          headers:
            Content-Type: "application/json"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          payload:
            testId: "{{ testId }}"
            state: "stable internet connectivity"
        expect:
          - statusCode: 200
            hasProperty: ["success"]
            equals:
              body:
                success: true
