# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
# 
# ROOST_METHOD_HASH=77709b3e66
# ROOST_METHOD_SIG_HASH=9efcbbb286
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Reset ONT device to resolve connectivity issues',
#     steps: 'Given a customer with subscriber ID "SVTAL002" reports intermittent internet connectivity\n' +
#       'When the support representative initiates a diagnostic test\n' +
#       'Then the service test API should return a test ID\n' +
#       'And the diagnostic result should indicate ONT connectivity issues\n' +
#       'When the support representative uses the configuration API to reset the GPON ONT\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should report stable internet connectivity',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 1
      arrivalRate: 1
  payload:
    path: "{{ROOST_CSV_FILE_NAME}}"
    fields:
      - "subscriberId"
    skipHeader: true
  defaults:
    headers:
      Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"

scenarios:
  - name: Reset ONT device to resolve connectivity issues
    flow:
      - post:
          url: "/serviceTest"
          json:
            serviceTest:
              type: "diagnostic"
              customer:
                subscriberId: "{{ subscriberId }}"
          capture:
            - json: "$.serviceTest.id"
              as: "testId"
          expect:
            - statusCode: 200
            - hasProperty: "serviceTest.id"

      - post:
          url: "/listener/serviceTestResultEvent"
          json:
            notification:
              customer:
                subscriberId: "{{ subscriberId }}"
              serviceTest:
                id: "{{ testId }}"
                type: "diagnostic"
                state: "FINISHED"
                diagnostic:
                  code: "NOK"
                  messages:
                    - errorCode: "ONT_CONNECTIVITY_ISSUE"
                      description: "ONT connectivity issues detected"
                      criticity: 2
          expect:
            - statusCode: 204

      - post:
          url: "/configuration"
          json:
            configuration:
              action:
                type: "GPON_ONT_RESET"
              customer:
                subscriberId: "{{ subscriberId }}"
          expect:
            - statusCode: 200
            - hasProperty: "control.type"
            - equals:
                - "{{ control.type }}"
                - "S"
            - hasProperty: "configuration.id"

      - think: 5

      - post:
          url: "/listener/configurationResultEvent"
          json:
            notification:
              customer:
                subscriberId: "{{ subscriberId }}"
              configuration:
                type: "GPON_ONT_RESET"
                state: "FINISHED"
                diagnostic:
                  code: "OK"
          expect:
            - statusCode: 204
